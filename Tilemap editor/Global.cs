using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Tilemap_editor
{
    public static class Global
    {
        public static Color transparentClr = Color.Black;
        public static string emuPath = "C:\\Users\\mikem\\OneDrive\\TASwork\\snes9x-1.60-win32\\snes9x.exe";
        public static string romPath = "test.smc";
        //public static string testROMpath = "C:\\Users\\mikem\\OneDrive\\Documents\\Visual Studio 2017\\DKC Projects++\\Tilemap editor\\Tilemap editor\\bin\\test.smc";
        public static string testROMpath = "test.smc";
        public static string backupROMpath = "backup - test.smc";
        //public static string romPath = "C:\\Users\\mikem\\OneDrive\\TASwork\\snes9x\\test.smc";
        public static string startupPath = "C:\\Users\\mikem\\OneDrive\\TASwork\\snes9x-1.60-win32";
        //public static string romPath = "C:\\Users\\mikem\\OneDrive\\Documents\\Visual Studio 2017\\DKC Projects++\\Tilemap editor\\Tilemap editor\\bin\\test.smc";
        public const string emulPath = "C:\\Users\\mikem\\OneDrive\\TASwork\\DKSE\\EmulSNES (16).exe";
        public static string pngImportPath = "C:\\Users\\mikem\\OneDrive\\Documents\\Visual Studio 2017\\DKC Projects++\\Image - SNES converter+\\Image - SNES converter\\bin\\Debug\\Image - SNES converter.exe";
        public static Stack<List<byte>> kkrClone = new Stack<List<byte>>();
        public static Stack<List<byte>> hexEditorClone = new Stack<List<byte>>();

        public static int backupVersion = 0;

        public static Dictionary<string, int> levelCodeByString = new Dictionary<string, int>();
        public static Dictionary<int, string> levelStringByCode = new Dictionary<int, string>();
        private static string[] levelStringRaw = new string[]
        {
            "Jungle Hijinx (Reptile Rumble object map?)",
            "Reptile Rumble (level exit)",
            "Reptile Rumble - Bonus 1",
            "Bouncy Bonanza - Winky Room",
            "Reptile Rumble - Bonus 3",
            "Manic Mincers - Bonus 1",
            "Jungle Hijinx - Bonus 1",
            "Bouncy Bonanza (level exit)",
            "Jungle Hijinx (from Bonus 1)",
            "Reptile Rumble (from Bonus 1)",
            "Misty Mine (level exit)",
            "Reptile Rumble (from Bonus 3)",
            "Ropey Rampage (level exit)",
            "Orang-utan Gang (level exit)",
            "Jungle Hijinx (start)",
            "Ropey Rampage (from Save)",
            "Bouncy Bonanza (from Winky Room)",
            "Bouncy Bonanza - Bonus 2",
            "Manic Mincers (level exit)",
            "Torchlight Trouble (from Save)",
            "Torchlight Trouble (level exit)",
            "Bouncy Bonanza (from Save)",
            "Jungle Hijinx (level exit)",
            "Barrel Cannon Canyon (level exit)",
            "Elevator Antics (level exit)",
            "Barrel Cannon Canyon (from Save)",
            "Jungle Hijinx - Bonus 2",
            "Ropey Rampage - Bonus 2",
            "Ropey Rampage - Bonus 1",
            "Orang-utan Gang (from Save)",
            "Orang-utan Gang - Bonus 3",
            "Orang-utan Gang - Bonus 2",
            "Orang-utan Gang - Bonus 1",
            " empty jungle room + boss music???",
            "Poison Pond (level exit)",
            "Elevator Antics (from Save)",
            "Snow Barrel Blast (level exit)",
            "Jungle Hijinx (from Save)",
            "Reptile Rumble (from Save)",
            "Mine Cart Madness (level exit)",
            "Snow Barrel Blast (from Save)",
            "Manic Mincers (from Save)",
            "Poison Pond (from Save)",
            "Platform Perils (level exit)",
            "Platform Perils (from Save)",
            "Misty Mine (from Save)",
            "Mine Cart Carnage (level exit)",
            "Trick Track Trek (level exit)",
            "Tanked Up Trouble (level exit)",
            "Stop & Go Station (level exit)",
            "Misty Mine - Bonus 2",
            "Misty Mine - Bonus 1",
            "Animal Token Room",
            "Millstone Mayhem (from warp)",
            "Loopy Lights (level exit)",
            "Loopy Lights - Bonus 2",
            "Mine Cart Carnage (from Save)",
            "Trick Track Trek (from Save)",
            "Tanked Up Trouble (from Save)",
            "Mine Cart Madness (from Save)",
            "Stop & Go Station (from Save)",
            "Loopy Lights (from Save)",
            "Croctopus Chase (level exit)",
            "Croctopus Chase (from Save)",
            "Oil Drum Alley (level exit)",
            "Blackout Basement (level exit)",
            "Millstone Mayhem (level exit)",
            "Temple Tempest (level exit)",
            "Oil Drum Alley (from Save)",
            "Blackout Basement (from Save)",
            "Barrel Cannon Canyon - Bonus 1",
            "Jungle Hijinx - Kong's Banana Hoard (empty)",
            "Reptile Rumble - Bonus 2",
            "Loopy Lights - Bonus 1",
            "Stop & Go Station - Bonus 2",
            "Stop & Go Station - Bonus 1",
            "Jungle Hijinx - Kong's Banana Hoard (full)",
            "Mine Cart Madness - Bonus 1",
            "Platform Perils - Bonus 1",
            "Winky's Walkway - Bonus 1",
            "Platform Perils - Bonus 2",
            "Winky's Walkway (from Bonus 1)",
            "Temple Tempest - Bonus 1",
            "Temple Tempest - Bonus 2",
            "Tree Top Town (warp)",
            "Millstone Mayhem - Bonus 1",
            "Millstone Mayhem - Bonus 2",
            "Millstone Mayhem - Bonus 3",
            "Millstone Mayhem (from Save)",
            "Temple Tempest (from Save)",
            "Orang-utan Gang - Bonus 5",
            "Orang-utan Gang - Bonus 4",
            "Jungle Hijinx - Kong's Cabin",
            "Barrel Cannon Canyon - Bonus 2",
            " Credits",
            "Jungle Hijinx (from Kong's Banana Hoard)",
            "Oil Drum Alley - Bonus 4",
            "Oil Drum Alley - Bonus 2",
            "Slipslide Ride (warp)",
            "Oil Drum Alley - Bonus 1",
            "Blackout Basement - Bonus 1",
            "Vulture Culture (warp)",
            "Snow Barrel Blast - Bonus 3",
            "Snow Barrel Blast - Bonus 1",
            "Gangplank Galleon",
            "Snow Barrel Blast - Bonus 2",
            "Ice Age Alley - Bonus 1",
            "Ice Age Alley - Bonus 2",
            "Expresso Bonus",
            "Slipslide Ride (level exit)",
            "Jungle Hijinx (from Bonus 2)",
            "Ropey Rampage (from Bonus 1)",
            "Ropey Rampage (from Bonus 2)",
            "Orang-utan Gang (from Bonus 4)",
            "Orang-utan Gang (from Bonus 2)",
            "Orang-utan Gang (from Bonus 1)",
            "Orang-utan Gang (from Bonus 3)",
            "Orang-utan Gang (from Bonus 5)",
            "Barrel Cannon Canyon (from Bonus 1)",
            "Barrel Cannon Canyon (from Bonus 2)",
            "Bouncy Bonanza (from Bonus 1)",
            "Bouncy Bonanza (from Bonus 2)",
            "Manic Mincers (from Bonus 1)",
            "Manic Mincers (from Ledge Room)",
            "Manic Mincers (from Bonus 2)",
            "Elevator Antics (from Bonus 1)",
            "Elevator Antics (from Bonus 2)",
            "Elevator Antics (from Bonus 3)",
            "Misty Mine (from Bonus 1)",
            "Misty Mine (from Bonus 2)",
            "Stop & Go Station (from Bonus 1)",
            "Stop & Go Station (from Bonus 2)",
            "Loopy Lights (from Bonus 1)",
            "Loopy Lights (from Bonus 2)",
            "Platform Perils (from Bonus 1)",
            "Platform Perils (from Bonus 2)",
            "Trick Track Trek (from Bonus 1)",
            "Trick Track Trek (from Bonus 3)",
            "Trick Track Trek (from Bonus 2)",
            "Tanked Up Trouble (from Bonus 1)",
            "Mine Cart Madness (from Bonus 1)",
            "Mine Cart Madness (from Bonus 2)",
            "Mine Cart Madness (from Bonus 3)",
            "Oil Drum Alley (from Bonus 1)",
            "Oil Drum Alley (from Bonus 2/3)",
            "Oil Drum Alley (from Bonus 4)",
            "Blackout Basement (from Bonus 1)",
            "Blackout Basement (from Bonus 2)",
            "Snow Barrel Blast (from Bonus 1)",
            "Snow Barrel Blast (from Bonus 2)",
            "Snow Barrel Blast (from Bonus 3)",
            "Bouncy Bonanza - Bonus 1",
            "Manic Mincers - Bonus 2",
            "Manic Mincers - Ledge Room",
            "Elevator Antics - Bonus 1",
            "Elevator Antics - Bonus 2",
            "Elevator Antics - Bonus 3",
            "Trick Track Trek - Bonus 3",
            "Trick Track Trek - Bonus 2",
            "Tanked Up Trouble - Bonus 1",
            "Mine Cart Madness - Bonus 2",
            "Trick Track Trek - Bonus 1",
            "Mine Cart Madness - Bonus 3",
            "Blackout Basement - Bonus 2",
            "Tree Top Town (level exit)",
            "Vulture Culture (level exit)",
            "Enguarde Bonus",
            "Ice Age Alley (level exit)",
            "Ice Age Alley (from Save)",
            "Tree Top Town (from Save)",
            "Vulture Culture (from Save)",
            "Slipslide Ride (from Save)",
            "Ice Age Alley (from Bonus 1)",
            "Ice Age Alley (from Bonus 2)",
            "Millstone Mayhem (from Bonus 1)",
            "Millstone Mayhem (from Bonus 2)",
            "Millstone Mayhem (from Bonus 3)",
            "Temple Tempest (from Bonus 1)",
            "Temple Tempest (from Bonus 2)",
            "Tree Top Town - Bonus 2",
            "Tree Top Town - Bonus 1",
            "Tree Top Town (from Bonus 1)",
            "Tree Top Town (from Bonus 2)",
            "Vulture Culture - Bonus 1",
            "Vulture Culture - Bonus 2",
            "Vulture Culture - Bonus 3",
            "Vulture Culture (from Bonus 1)",
            "Vulture Culture (from Bonus 2)",
            "Vulture Culture (from Bonus 3)",
            "Trick Track Trek (warp)",
            "Oil Drum Alley - Bonus 3",
            "Coral Capers (level exit)",
            "Coral Capers (from Save)",
            "Torchlight Trouble - Bonus 1",
            "Torchlight Trouble (from Bonus 1)",
            "Torchlight Trouble - Bonus 2",
            "Torchlight Trouble (from Bonus 2)",
            "Slipslide Ride - Bonus 2",
            "Slipslide Ride - Bonus 3",
            "Slipslide Ride (from Bonus 1)",
            "Slipslide Ride (from Bonus 2)",
            "Reptile Rumble (from Bonus 2)",
            "Slipslide Ride - Bonus 1",
            "Slipslide Ride (from Bonus 3)",
            "Mine Cart Carnage (warp)",
            "Stop & Go Station (warp)",
            "Rope Bridge Rumble (level exit)",
            "Rope Bridge Rumble (from Save)",
            "Forest Frenzy (level exit)",
            "Forest Frenzy (from Save)",
            "Rambi Bonus",
            "Winky Bonus",
            "Forest Frenzy - Bonus 2",
            "Rope Bridge Rumble - Bonus 1",
            "Rope Bridge Rumble (from Bonus 2)",
            "Rope Bridge Rumble - Bonus 2",
            "Rope Bridge Rumble (from Bonus 1)",
            "Winky's Walkway (level exit)",
            "Winky's Walkway (from Save)",
            "Forest Frenzy (from Bonus 2)",
            "Forest Frenzy - Bonus 1",
            "Forest Frenzy (from Bonus 1)",
            "Clam City (level exit)",
            "Clam City (from Save)",
            "Very Gnawty's Lair",
            "Necky's Nuts",
            "Really Gnawty Rampage",
            "Boss Dumb Drum",
            "Necky's Revenge",
            "Bumble B Rumble",
        };
        public static void DKCInit()
        {
            for (int i = 0; i < levelStringRaw.Length; i++)
            {
                var str = levelStringRaw[i];
                levelStringByCode[i] = str;
                levelCodeByString[str] = i;
            }
        }

        public static bool entityEdit = false;
        public static bool mod = false;
        public static int mapChipX = 0;
        public static int mapChipY = 0;
        public static string binFilter = "BIN (*.bin)|*.bin";

        public static Dictionary<string, Dictionary<string, string>> backupLUT = new Dictionary<string, Dictionary<string, string>>();

        public static string FileNameParse(string name)
        {
            string str = "";
            var arr = name.Split('\\');
            str = arr[arr.Length - 1];
            str = str.Substring(0, str.Length - 4);
            return str;
        }
        public static List<Bitmap> bananaImg;









        public static int Read16(int offset, byte[] arr)
        {
            return (arr[offset] << 0) |
                   (arr[offset + 1] << 8);
        }
        public static int[] Read16(int value)
        {
            return new int[] { (value & 0xff), (value >> 8) };
        }
        public static void Write16(int value, int offset, byte[] arr)
        {
            arr[offset++] = (byte)(value >> 0);
            arr[offset++] = (byte)(value >> 8);
        }
        public static List<List<int>> DeepCopyListList(List<List<int>> arr)
        {
            List<List<int>> @return = new List<List<int>>();
            for (int i = 0; i < arr.Count; i++)
            {
                @return.Add(new List<int>());
                for (int j = 0; j < arr[i].Count; j++)
                {
                    @return[i].Add(arr[i][j]);
                }

            }

            return @return;
        }
        public static bool Within255 (int a, int b)
        {
            return a <= b + 255 && a >= b - 255;
        }
        public static string HexToString(int hex)
        {
            return hex.ToString("X4");
        }
        public static void FillWithIndices(int[] arr)
        {
            int index = 0;
            for (int i = 0; i < arr.Length; i++)
            {
                arr[i] = index++;
            }
        }

        public static void Write16ToArr(int address, int value, List<byte> arr)
        {
            arr[address++] = (byte)(value >> 0);
            arr[address++] = (byte)(value >> 8);
        }
        public static void Write16ToArr(int address, int value, byte[] arr)
        {
            arr[address++] = (byte)(value >> 0);
            arr[address++] = (byte)(value >> 8);
        }
        public static void Write24ToArr(int address, int value, List<byte> arr)
        {
            arr[address++] = (byte)(value >> 0);
            arr[address++] = (byte)(value >> 8);
            arr[address++] = (byte)(value >> 16);
        }
        public static Point MoveSnapPoint(int startX, int startY, int newX, int newY, int snap)
        {
            Point @return = new Point();

            // X
            int modX = newX - startX;
            if (modX < 0) modX *= -1;
            if (modX > snap / 2)
            {
                modX /= snap;
                modX++;
            }
            else modX = 0;
            modX *= snap;
            int endX = 0;
            if (newX > startX) endX = startX + modX;
            else endX = startX - modX;

            // Y
            int modY = newY - startY;
            if (modY < 0) modY *= -1;
            if (modY > snap / 2)
            {
                modY /= snap;
                modY++;
            }
            else modY = 0;
            modY *= snap;
            int endY = 0;
            if (newY > startY) endY = startY + modY;
            else endY = startY - modY;

            endX = endX < 0 ? 0 : endX;
            endY = endY < 0 ? 0 : endY;
            @return = new Point(endX, endY);

            return @return;
        }
        public static int signatureAddress = 0xe82466;
        public static string signatureString = "Rainbow1";
        public static byte[] zeroes = Enumerable.Repeat((byte)0, 0x100).ToArray();

        public static int[] copyrightAddresses = new int[]
        {
            0xE9C0,0xE9C1,0xE9D4,0xE9D5,0xF29A,0xF29D,0xF29E, 0xFFDC,0xFFDD,0xFFDE,0xFFDF,0x1F3E8,0x1F3E9,0x1F3EA,0x1F3EB,0x1F3EC,0x1F3ED,0x1F3EE,0x1F3EF,0x1F3F0,0x1F3F1,0x1F3F2,0x1F3F3,0x1F3F4,0x1F3F5,0x1F3F6,0x1F3F7,0x1F3F8,0x1F3F9,0x1F3FA,0x1F3FB,0x1F3FC,0x1F3FD,0x1F3FE,0x1F3FF,0x1F400,0x1F401,0x1F402,0x1F403,0x1F404,0x1F405,0x1F406,0x1F407,0x1F408,0x1F409,0x1F40A,0x1F40B,0x1F40C,0x1F40D,0x1F40E,0x1F40F,0x1F410,0x1F411,0x1F412,0x1F413,0x1F414,0x1F415,0x1F416,0x1F417,0x1F418,0x1F419,0x1F41A,0x1F41B,0x1F41C,0x1F41D,0x1F41E,0x1F41F,0x1F420,0x1F421,0x1F422,0x1F423,0x1F424,0x1F425,0x1F426,0x1F427,0x1F428,0x1F429,0x1F42A,0x1F42B,0x1F42C,0x1F42D,0x1F42E,0x1F42F,0x1F430,0x1F431,0x1F432,0x1F433,0x1F434,0x1F435,0x1F436,0x1F437,0x1F438,0x1F439,0x1F43A,0x1F43B,0x1F43C,0x1F43D,0x1F43E,0x1F43F,0x1F440,0x1F441,0x1F442,0x1F443,0x1F444,0x1F445,0x1F446,0x1F447,0x1F448,0x1F449,0x1F44A,0x1F44B,0x1F44C,0x1F44D,0x1F44E,0x1F44F,0x1F450,0x1F451,0x1F452,0x1F453,0x1F454,0x1F455,0x1F456,0x1F457,0x1F458,0x1F459,0x1F45A,0x1F45B,0x1F45C,0x1F45D,0x1F45E,0x1F45F,0x1F460,0x1F461,0x1F462,0x1F463,0x1F464,0x1F465,0x1F466,0x1F467,0x1F468,0x1F469,0x1F46A,0x1F46B,0x1F46C,0x1F46D,0x1F46E,0x1F46F,0x1F470,0x1F471,0x1F472,0x1F473,0x1F474,0x1F475,0x1F476,0x1F477,0x1F478,0x1F479,0x1F47A,0x1F47B,0x1F47C,0x1F47D,0x1F47E,0x1F47F,0x1F480,0x1F481,0x1F482,0x1F483,0x1F484,0x1F485,0x1F486,0x1F487,0x1F488,0x1F489,0x1F48A,0x1F48B,0x1F48C,0x1F48D,0x1F48E,0x1F48F,0x1F490,0x1F491,0x1F492,0x1F493,0x1F494,0x1F495,0x1F496,0x1F497,0x1F498,0x1F499,0x1F49A,0x1F49B,0x1F49C,0x1F49D,0x1F49E,0x1F49F,0x1F4A0,0x1F4A1,0x1F4A2,0x1F4A3,0x1F4A4,0x1F4A5,0x1F4A6,0x1F4A7,0x1F4A8,0x1F4A9,0x1F4AA,0x1F4AB,0x1F4AC,0x1F4AD,0x1F4AE,0x1F4AF,0x1F4B0,0x1F4B1,0x1F4B2,0x1F4B3,0x1F4B4,0x1F4B5,0x1F4B6,0x1F4B7,0x1F4B8,0x1F4B9,0x1F4BA,0x1F4BB,0x1F4BC,0x1F4BD,0x1F4BE,0x1F4BF,0x1F4C0,0x1F4C1,0x1F4C2,0x1F4C3,0x1F4C4,0x1F4C5,0x1F4C6,0x1F4C7,0x1F4C8,0x1F4C9,0x1F4CA,0x1F4CB,0x1F4CC,0x1F4CD,0x1F4CE,0x1F4CF,0x1F4D0,0x1F4D1,0x1F4D2,0x1F4D3,0x1F4D4,0x1F4D5,0x1F4D6,0x1F4D7,0x1F4D8,0x1F4D9,0x1F4DA,0x1F4DB,0x1F4DC,0x1F4DD,0x1F4DE,0x1F4DF,0x1F4E0,0x1F4E1,0x1F4E2,0x1F4E3,0x1F4E4,0x1F4E5,0x1F4E6,0x1F4E7,0x1F4E8,0x1F4E9,0x1F4EA,0x1F4EB,0x1F4EC,0x1F4ED,0x1F4EE,0x1F4EF,0x1F4F0,0x1F4F1,0x1F4F2,0x1F4F3,0x1F4F4,0x1F4F5,0x1F4F6,0x1F4F7,0x1F4F8,0x1F4F9,0x1F4FA,0x1F4FB,0x1F4FC,0x1F4FD,0x1F4FE,0x1F4FF,0x1F500,0x1F501,0x1F502,0x1F503,0x1F504,0x1F505,0x1F506,0x1F507,0x1F508,0x1F509,0x1F50A,0x1F50B,0x1F50C,0x1F50D,0x1F50E,0x1F50F,0x1F510,0x1F511,0x1F512,0x1F513,0x1F514,0x1F515,0x1F516,0x1F517,0x1F518,0x1F519,0x1F51A,0x1F51B,0x1F51C,0x1F51D,0x1F51E,0x1F51F,0x1F520,0x1F521,0x1F522,0x1F523,0x1F524,0x1F525,0x1F526,0x1F527,0x1F528,0x1F529,0x1F52A,0x1F52B,0x1F52C,0x1F52D,0x1F52E,0x1F52F,0x1F530,0x1F531,0x1F532,0x1F533,0x1F534,0x1F535,0x1F536,0x1F537,0x1F538,0x1F539,0x1F53A,0x1F53B,0x1F53C,0x1F53D,0x1F53E,0x1F53F,0x1F540,0x1F541,0x1F542,0x1F543,0x1F544,0x1F545,0x1F546,0x1F547,0x1F548,0x1F549,0x1F54A,0x1F54B,0x1F54C,0x1F54D,0x1F54E,0x1F54F,0x1F550,0x1F551,0x1F552,0x1F553,0x1F554,0x1F555,0x1F556,0x1F557,0x1F558,0x1F559,0x1F55A,0x1F55B,0x1F55C,0x1F55D,0x1F55E,0x1F55F,0x1F560,0x1F561,0x1F562,0x1F563,0x1F564,0x1F565,0x1F566,0x1F567,0x1F568,0x1F569,0x1F56A,0x1F56B,0x1F56C,0x1F56D,0x1F56E,0x1F56F,0x1F570,0x1F571,0x1F572,0x1F573,0x1F574,0x1F575,0x1F576,0x1F577,0x1F578,0x1F579,0x1F57A,0x1F57B,0x1F57C,0x1F57D,0x1F57E,0x1F57F,0x1F580,0x1F581,0x1F582,0x1F583,0x1F584,0x1F585,0x1F586,0x1F587,0x1F588,0x1F589,0x1F58A,0x1F58B,0x1F58C,0x1F58D,0x1F58E,0x1F58F,0x1F590,0x1F591,0x1F592,0x1F594,0x1F595,0x1F596,0x1F597,0x1F598,0x1F599,0x1F59A,0x1F59B,0x1F59C,0x1F59D,0x1F59E,0x1F59F,0x1F5A0,0x1F5A1,0x1F5A2,0x1F5A3,0x1F5A4,0x1F5A5,0x1F5A6,0x1F5A7,0x1F5A8,0x1F5A9,0x1F5AA,0x1F5AB,0x1F5AC,0x1F5AD,0x1F5AE,0x1F5AF,0x1F5B0,0x1F5B1,0x1F5B2,0x1F5B3,0x1F5B4,0x1F5B5,0x1F5B6,0x1F5B7,0x1F5B8,0x1F5B9,0x1F5BA,0x1F5BB,0x1F5BC,0x1F5BD,0x1F5BE,0x1F5BF,0x1F5C0,0x1F5C1,0x1F5C2,0x1F5C3,0x1F5C4,0x1F5C5,0x1F5C6,0x1F5C7,0x1F5C8,0x1F5C9,0x1F5CA,0x1F5CB,0x1F5CC,0x1F5CD,0x1F5CE,0x1F5CF,0x1F5D0,0x1F5D1,0x1F5D2,0x1F5D3,0x1F5D4,0x1F5D5,0x1F5D6,0x1F5D7,0x1F5D8,0x1F5D9,0x1F5DA,0x1F5DB,0x1F5DC,0x1F5DD,0x1F5DE,0x1F5DF,0x1F5E0,0x1F5E1,0x1F5E2,0x1F5E3,0x1F5E4,0x1F5E5,0x1F5E6,0x1F5E7,0x1F5E8,0x1F5E9,0x1F5EA,0x1F5EB,0x1F5EC,0x1F5ED,0x1F5EE,0x1F5EF,0x1F5F0,0x1F5F1,0x1F5F2,0x1F5F3,0x1F5F4,0x1F5F5,0x1F5F6,0x1F5F7,0x1F5F8,0x1F5F9,0x1F5FA,0x1F5FB,0x1F5FC,0x1F5FD,0x1F5FE,0x1F5FF,0x1F600,0x1F601,0x1F602,0x1F603,0x1F604,0x1F605,0x1F606,0x1F607,0x1F608,0x1F609,0x1F60A,0x1F60B,0x1F60C,0x1F60D,0x1F60E,0x1F60F,0x1F610,0x1F611,0x1F612,0x1F613,0x1F614,0x1F615,0x1F616,0x1F617,0x1F618,0x1F619,0x1F61A,0x1F61B,0x1F61C,0x1F61D,0x1F61E,0x1F61F,0x1F620,0x1F621,0x1F622,0x1F623,0x1F624,0x1F625,0x1F626,0x1F627,0x1F628,0x1F629,0x1F62A,0x1F62B,0x1F62C,0x1F62D,0x1F62E,0x1F62F,0x1F630,0x1F631,0x1F632,0x1F633,0x1F634,0x1F635,0x1F636,0x1F637,0x1F638,0x1F639,0x1F63A,0x1F63B,0x1F63C,0x1F63D,0x1F63E,0x1F63F,0x1F640,0x1F641,0x1F642,0x1F643,0x1F644,0x1F645,0x1F646,0x1F647,0x1F648,0x1F649,0x1F64A,0x1F64B,0x1F64C,0x1F64D,0x1F64E,0x1F64F,0x1F650,0x1F651,0x1F652,0x1F653,0x1F654,0x1F655,0x1F656,0x1F657,0x1F658,0x1F659,0x1F65A,0x1F65B,0x1F65C,0x1F65D,0x1F65E,0x1F65F,0x1F660,0x1F661,0x1F662,0x1F663,0x1F664,0x1F665,0x1F666,0x1F667,0x1F668,0x1F669,0x1F66A,0x1F66B,0x1F66C,0x1F66D,0x1F66E,0x1F66F,0x1F670,0x1F671,0x1F672,0x1F673,0x1F674,0x1F675,0x1F676,0x1F677,0x1F678,0x1F679,0x1F67A,0x1F67B,0x1F67C,0x1F67D,0x1F67E,0x1F67F,0x1F680,0x1F681,0x1F682,0x1F683,0x1F684,0x1F685,0x1F686,0x1F687,0x1F688,0x1F689,0x1F68A,0x1F68B,0x1F68C,0x1F68D,0x1F68E,0x1F68F,0x1F690,0x1F691,0x1F692,0x1F693,0x1F694,0x1F695,0x1F696,0x1F697,0x1F698,0x1F699,0x1F69A,0x1F69B,0x1F69C,0x1F69D,0x1F69E,0x1F69F,0x1F6A0,0x1F6A1,0x1F6A2,0x1F6A3,0x1F6A4,0x1F6A5,0x1F6A6,0x1F6A7,0x1F6A8,0x1F6A9,0x1F6AA,0x1F6AB,0x1F6AC,0x1F6AD,0x1F6AE,0x1F6AF,0x1F6B0,0x1F6B1,0x1F6B2,0x1F6B3,0x1F6B4,0x1F6B5,0x1F6B6,0x1F6B7,0x1F6B8,0x1F6B9,0x1F6BA,0x1F6BB,0x1F6BC,0x1F6BD,0x1F6BE,0x1F6BF,0x1F6C0,0x1F6C1,0x1F6C2,0x1F6C3,0x1F6C4,0x1F6C5,0x1F6C6,0x1F6C7,0x1F6C8,0x1F6C9,0x1F6CA,0x1F6CB,0x1F6CC,0x1F6CD,0x1F6CE,0x1F6CF,0x1F6D0,0x1F6D1,0x1F6D2,0x1F6D3,0x1F6D4,0x1F6D5,0x1F6D6,0x1F6D7,0x1F6D8,0x1F6D9,0x1F6DA,0x1F6DB,0x1F6DC,0x1F6DD,0x1F6DE,0x1F6DF,0x1F6E0,0x1F6E1,0x1F6E2,0x1F6E3,0x1F6E4,0x1F6E5,0x1F6E6,0x1F6E7,0x1F6E8,0x1F6E9,0x1F6EA,0x1F6EB,0x1F6EC,0x1F6ED,0x1F6EE,0x1F6EF,0x1F6F0,0x1F6F1,0x1F6F2,0x1F6F3,0x1F6F4,0x1F6F5,0x1F6F6,0x1F6F7,0x1F6F8,0x1F6F9,0x1F6FA,0x1F6FB,0x1F6FC,0x1F6FD,0x1F6FE,0x1F6FF,0x1F700,0x1F701,0x1F702,0x1F703,0x1F704,0x1F705,0x1F706,0x1F707,0x1F708,0x1F709,0x1F70A,0x1F70B,0x1F70C,0x1F70D,0x1F70E,0x1F70F,0x1F710,0x1F711,0x1F712,0x1F713,0x1F714,0x1F715,0x1F716,0x1F717,0x1F718,0x1F719,0x1F71A,0x1F71B,0x1F71C,0x1F71D,0x1F71E,0x1F71F,0x1F720,0x1F721,0x1F722,0x1F723,0x1F724,0x1F725,0x1F726,0x1F727,0x1F728,0x1F729,0x1F72A,0x1F72B,0x1F72C,0x1F72D,0x1F72E,0x1F72F,0x1F730,0x1F731,0x1F732,0x1F733,0x1F734,0x1F735,0x1F736,0x1F737,0x1F738,0x1F739,0x1F73A,0x1F73B,0x1F73C,0x1F73D,0x1F73E,0x1F73F,0x1F740,0x1F741,0x1F742,0x1F743,0x1F744,0x1F745,0x1F746,0x1F747,0x1F748,0x1F749,0x1F74A,0x1F74B,0x1F74C,0x1F74D,0x1F74E,0x1F74F,0x1F750,0x1F751,0x1F752,0x1F753,0x1F754,0x1F755,0x1F756,0x1F757,0x1F758,0x1F759,0x1F75A,0x1F75B,0x1F75C,0x1F75D,0x1F75E,0x1F75F,0x1F760,0x1F761,0x1F762,0x1F763,0x1F764,0x1F765,0x1F766,0x1F767,0x1F768,0x1F769,0x1F76A,0x1F76B,0x1F76C,0x1F76D,0x1F76E,0x1F76F,0x1F770,0x1F771,0x1F772,0x1F773,0x1F774,0x1F775,0x1F776,0x1F777,0x1F778,0x1F779,0x1F77A,0x1F77B,0x1F77C,0x1F77D,0x1F77E,0x1F77F,0x1F780,0x1F781,0x1F782,0x1F783,0x1F784,0x1F785,0x1F786,0x1F787,0x1F788,0x1F789,0x1F78A,0x1F78B,0x1F78C,0x1F78D,0x1F78E,0x1F78F,0x1F790,0x1F791,0x1F792,0x1F793,0x1F794,0x1F795,0x1F796,0x1F797,0x1F798,0x1F799,0x1F79A,0x1F79B,0x1F79C,0x1F79D,0x1F79E,0x1F79F,0x1F7A0,0x1F7A1,0x1F7A2,0x1F7A3,0x1F7A4,0x1F7A5,0x1F7A6,0x1F7A7,0x1F7A8,0x1F7A9,0x1F7AA,0x1F7AB,0x1F7AC,0x1F7AD,0x1F7AE,0x1F7AF,0x1F7B0,0x1F7B1,0x1F7B2,0x1F7B3,0x1F7B4,0x1F7B5,0x1F7B6,0x1F7B7,0x1F7B8,0x1F7B9,0x1F7BA,0x1F7BB,0x1F7BC,0x1F7BD,0x1F7BE,0x1F7BF,0x1F7C0,0x1F7C1,0x1F7C2,0x1F7C3,0x1F7C4,0x1F7C5,0x1F7C6,0x1F7C7,0x1F7C8,0x1F7C9,0x1F7CA,0x1F7CB,0x1F7CC,0x1F7CD,0x1F7CE,0x1F7CF,0x1F7D0,0x1F7D1,0x1F7D2,0x1F7D3,0x1F7D4,0x1F7D5,0x1F7D6,0x1F7D7,0x1F7D8,0x1F7D9,0x1F7DA,0x1F7DB,0x1F7DD,0x1F7DE,0x1F7DF,0x1F7E0,0x1F7E1,0x1F7E2,0x1F7E3,0x1F7E4,0x1F7E5,0x1F7E6,0x1F7E7,0x1F7E8,0x1F7E9,0x1F7EA,0x1F7EB,0x1F7EC,0x1F7ED,0x1F7EE,0x1F7EF,0x1F7F0,0x1F7F1,0x1F7F2,0x1F7F3,0x1F7F4,0x1F7F5,0x1F7F6,0x1F7F7,0x1F7F8,0x1F7F9,0x1F7FA,0x1F7FB,0x1F7FC,0x1F7FD,0x1F7FE,0x1F7FF,0x1F800,0x1F801,0x1F802,0x1F803,0x1F804,0x1F805,0x1F806,0x1F807,0x1F808,0x1F809,0x1F80A,0x1F80B,0x1F80C,0x1F80D,0x1F80E,0x1F80F,0x1F810,0x1F811,0x1F812,0x1F813,0x1F814,0x1F815,0x1F816,0x1F817,0x1F818,0x1F819,0x1F81A,0x1F81B,0x1F81C,0x1F81D,0x1F81E,0x1F81F,0x1F820,0x1F821,0x1F822,0x1F823,0x1F824,0x1F825,0x1F826,0x1F827,0x1F828,0x1F829,0x1F82A,0x1F82B,0x1F82C,0x1F82D,0x1F82E,0x1F82F,0x1F830,0x1F831,0x1F832,0x1F833,0x1F834,0x1F835,0x1F836,0x1F837,0x1F838,0x1F839,0x1F83A,0x1F83B,0x1F83C,0x1F83D,0x1F83E,0x1F83F,0x1F840,0x1F841,0x1F842,0x1F843,0x1F844,0x1F845,0x1F846,0x1F847,0x1F848,0x1F849,0x1F84A,0x1F84B,0x1F84C,0x1F84D,0x1F84E,0x1F84F,0x1F850,0x1F851,0x1F852,0x1F853,0x1F854,0x1F855,0x1F856,0x1F857,0x1F858,0x1F859,0x1F85A,0x1F85B,0x1F85C,0x1F85E,0x1F85F,0x1F860,0x1F861,0x1F862,0x1F863,0x1F864,0x1F865,0x1F866,0x1F867,0x1F868,0x1F869,0x1F86A,0x1F86B,0x1F86C,0x1F86D,0x1F86E,0x1F86F,0x1F870,0x1F871,0x1F872,0x1F873,0x1F874,0x1F875,0x1F876,0x1F877,0x1F878,0x1F879,0x1F87A,0x1F87B,0x1F87C,0x1F87D,0x1F87E,0x1F87F,0x1F880,0x1F881,0x1F882,0x1F883,0x1F884,0x1F885,0x1F886,0x1F887,0x1F888,0x1F889,0x1F88A,0x1F88B,0x1F88C,0x1F88D,0x1F88E,0x1F88F,0x1F890,0x1F891,0x1F892,0x1F893,0x1F894,0x1F895,0x1F896,0x1F897,0x1F898,0x1F899,0x1F89A,0x1F89B,0x1F89C,0x1F89D,0x1F89E,0x1F89F,0x1F8A0,0x1F8A1,0x1F8A2,0x1F8A3,0x1F8A4,0x1F8A5,0x1F8A6,0x1F8A7,0x1F8A8,0x1F8A9,0x1F8AA,0x1F8AB,0x1F8AC,0x1F8AD,0x1F8AE,0x1F8AF,0x1F8B0,0x1F8B1,0x1F8B2,0x1F8B3,0x1F8B4,0x1F8B5,0x1F8B6,0x1F8B7,0x1F8B8,0x1F8B9,0x1F8BA,0x1F8BB,0x1F8BC,0x1F8BD,0x1F8BE,0x1F8BF,0x1F8C0,0x1F8C1,0x1F8C2,0x1F8C3,0x1F8C4,0x1F8C5,0x1F8C6,0x1F8C7,0x1F8C8,0x1F8C9,0x1F8CA,0x1F8CB,0x1F8CC,0x1F8CD,0x1F8CE,0x1F8CF,0x1F8D0,0x1F8D1,0x1F8D2,0x1F8D3,0x1F8D4,0x1F8D5,0x1F8D6,0x1F8D7,0x1F8D8,0x1F8D9,0x1F8DA,0x1F8DB,0x1F8DC,0x1F8DD,0x1F8DE,0x1F8DF,0x1F8E0,0x1F8E1,0x1F8E2,0x1F8E3,0x1F8E4,0x1F8E5,0x1F8E6,0x1F8E7,0x1F8E8,0x1F8E9,0x1F8EA,0x1F8EB,0x1F8EC,0x1F8ED,0x1F8EE,0x1F8EF,0x1F8F0,0x1F8F1,0x1F8F2,0x1F8F3,0x1F8F4,0x1F8F5,0x1F8F6,0x1F8F7,0x1F8F8,0x1F8F9,0x1F8FA,0x1F8FB,0x1F8FC,0x1F8FD,0x1F8FE,0x1F8FF,0x1F900,0x1F901,0x1F902,0x1F903,0x1F904,0x1F906,0x1F907,0x1F908,0x1F909,0x1F90A,0x1F90B,0x1F90C,0x1F90D,0x1F90E,0x1F90F,0x1F910,0x1F911,0x1F912,0x1F913,0x1F914,0x1F915,0x1F916,0x1F917,0x1F918,0x1F919,0x1F91A,0x1F91B,0x1F91C,0x1F91D,0x1F91E,0x1F91F,0x1F920,0x1F921,0x1F922,0x1F923,0x1F924,0x1F925,0x1F926,0x1F927,0x1F928,0x1F929,0x1F92A,0x1F92B,0x1F92C,0x1F92D,0x1F92E,0x1F92F,0x1F930,0x1F931,0x1F932,0x1F933,0x1F934,0x1F935,0x1F936,0x1F937,0x1F938,0x1F939,0x1F93A,0x1F93B,0x1F93C,0x1F93D,0x1F93E,0x1F93F,0x1F940,0x1F941,0x1F942,0x1F943,0x1F944,0x1F945,0x1F946,0x1F947,0x1F948,0x1F949,0x1F94A,0x1F94B,0x1F94C,0x1F94D,0x1F94E,0x1F94F,0x1F950,0x1F951,0x1F952,0x1F953,0x1F954,0x1F955,0x1F956,0x1F957,0x1F958,0x1F959,0x1F95A,0x1F95B,0x1F95C,0x1F95D,0x1F95E,0x1F95F,0x1F960,0x1F961,0x1F962,0x1F963,0x1F964,0x1F965,0x1F966,0x1F967,0x1F968,0x1F969,0x1F96A,0x1F96B,0x1F96C,0x1F96D,0x1F96E,0x1F96F,0x1F970,0x1F971,0x1F972,0x1F973,0x1F974,0x1F975,0x1F976,0x1F977,0x1F978,0x1F979,0x1F97A,0x1F97B,0x1F97C,0x1F97D,0x1F97E,0x1F97F,0x1F980,0x1F981,0x1F982,0x1F983,0x1F984,0x1F985,0x1F986,0x1F987,0x1F988,0x1F989,0x1F98A,0x1F98B,0x1F98C,0x1F98D,0x1F98E,0x1F98F,0x1F990,0x1F991,0x1F992,0x1F993,0x1F994,0x1F995,0x1F996,0x1F997,0x1F998,0x1F999,0x1F99A,0x1F99B,0x1F99C,0x1F99D,0x1F99E,0x1F99F,0x1F9A0,0x1F9A1,0x1F9A2,0x1F9A3,0x1F9A4,0x1F9A5,0x1F9A6,0x1F9A7,0x1F9A8,0x1F9A9,0x1F9AA,0x1F9AB,0x1F9AC,0x1F9AD,0x1F9AE,0x1F9AF,0x1F9B0,0x1F9B1,0x1F9B2,0x1F9B3,0x1F9B4,0x1F9B5,0x1F9B6,0x1F9B7,0x1F9B8,0x1F9B9,0x1F9BA,0x1F9BB,0x1F9BC,0x1F9BD,0x1F9BE,0x1F9BF,0x1F9C0,0x1F9C1,0x1F9C2,0x1F9C3,0x1F9C4,0x1F9C5,0x1F9C6,0x1F9C7,0x1F9C8,0x1F9C9,0x1F9CA,0x1F9CB,0x1F9CC,0x1F9CD,0x1F9CE,0x1F9CF,0x1F9D0,0x1F9D1,0x1F9D2,0x1F9D3,0x1F9D4,0x1F9D5,0x1F9D6,0x1F9D7,0x1F9D8,0x1F9D9,0x1F9DA,0x1F9DB,0x1F9DC,0x1F9DD,0x1F9DE,0x1F9DF,0x1F9E0,0x1F9E1,0x1F9E2,0x1F9E3,0x1F9E4,0x1F9E5,0x1F9E6,0x1F9E7,0x1F9E8,0x1F9E9,0x1F9EA,0x1F9EB,0x1F9EC,0x1F9ED,0x1F9EE,0x1F9EF,0x1F9F0,0x1F9F1,0x1F9F2,0x1F9F3,0x1F9F4,0x1F9F5,0x1F9F6,0x1F9F7,0x1F9F8,0x1F9F9,0x1F9FA,0x1F9FB,0x1F9FC,0x1F9FD,0x1F9FE,0x1F9FF,0x1FA00,0x1FA02,0x1FA03,0x1FA04,0x1FA05,0x1FA06,0x1FA07,0x1FA08,0x1FA09,0x1FA0A,0x1FA0B,0x1FA0C,0x1FA0D,0x1FA0E,0x1FA0F,0x1FA10,0x1FA11,0x1FA12,0x1FA13,0x1FA14,0x1FA15,0x1FA16,0x1FA17,0x1FA18,0x1FA19,0x1FA1A,0x1FA1B,0x1FA1C,0x1FA1D,0x1FA1E,0x1FA1F,0x1FA20,0x1FA21,0x1FA22,0x1FA23,0x1FA24,0x1FA25,0x1FA26,0x1FA27,0x1FA28,0x1FA29,0x1FA2A,0x1FA2B,0x1FA2C,0x1FA2D,0x1FA2E,0x1FA2F,0x1FA30,0x1FA31,0x1FA32,0x1FA33,0x1FA34,0x1FA35,0x1FA36,0x1FA37,0x1FA38,0x1FA39,0x1FA3A,0x1FA3B,0x1FA3C,0x1FA3D,0x1FA3E,0x1FA3F,0x1FA40,0x1FA41,0x1FA42,0x1FA43,0x1FA44,0x1FA45,0x1FA46,0x1FA47,0x1FA48,0x1FA49,0x1FA4A,0x1FA4B,0x1FA4C,0x1FA4D,0x1FA4E,0x1FA4F,0x1FA50,0x1FA51,0x1FA52,0x1FA53,0x1FA54,0x1FA55,0x1FA56,0x1FA57,0x1FA58,0x1FA59,0x1FA5A,0x1FA5B,0x1FA5C,0x1FA5D,0x1FA5E,0x1FA5F,0x1FA60,0x1FA61,0x1FA62,0x1FA63,0x1FA64,0x1FA65,0x1FA66,0x1FA67,0x1FA68,0x1FA69,0x1FA6A,0x1FA6B,0x1FA6C,0x1FA6D,0x1FA6E,0x1FA6F,0x1FA70,0x1FA71,0x1FA72,0x1FA73,0x1FA74,0x1FA75,0x1FA76,0x1FA77,0x1FA78,0x1FA79,0x1FA7A,0x1FA7B,0x1FA7C,0x1FA7D,0x1FA7E,0x1FA7F,0x1FA80,0x1FA81,0x1FA82,0x1FA83,0x1FA84,0x1FA85,0x1FA86,0x1FA87,0x1FA88,0x1FA89,0x1FA8A,0x1FA8B,0x1FA8C,0x1FA8D,0x1FA8E,0x1FA8F,0x1FA90,0x1FA91,0x1FA92,0x1FA93,0x1FA94,0x1FA95,0x1FA96,0x1FA97,0x1FA98,0x1FA99,0x1FA9A,0x1FA9B,0x1FA9C,0x1FA9D,0x1FA9E,0x1FA9F,0x1FAA0,0x1FAA1,0x1FAA2,0x1FAA3,0x1FAA4,0x1FAA5,0x1FAA6,0x1FAA7,0x1FAA8,0x1FAA9,0x1FAAA,0x1FAAB,0x1FAAC,0x1FAAD,0x1FAAE,0x1FAAF,0x1FAB0,0x1FAB1,0x1FAB2,0x1FAB3,0x1FAB4,0x1FAB5,0x1FAB6,0x1FAB7,0x1FAB8,0x1FAB9,0x1FABA,0x1FABB,0x1FABC,0x1FABD,0x1FABE,0x1FABF,0x1FAC0,0x1FAC1,0x1FAC2,0x1FAC3,0x1FAC4,0x1FAC5,0x1FAC6,0x1FAC7,0x1FAC8,0x1FAC9,0x1FACA,0x1FACB,0x1FACC,0x1FACD,0x1FACE,0x1FACF,0x1FAD0,0x1FAD1,0x1FAD2,0x1FAD3,0x1FAD4,0x1FAD5,0x1FAD6,0x1FAD7,0x1FAD8,0x1FAD9,0x1FADA,0x1FADB,0x1FADC,0x1FADD,0x1FADE,0x1FADF,0x1FAE0,0x1FAE1,0x1FAE2,0x1FAE3,0x1FAE4,0x1FAE5,0x1FAE6,0x1FAE7,0x1FAE8,0x1FAE9,0x1FAEA,0x1FAEB,0x1FAEC,0x1FAED,0x1FAEE,0x1FAEF,0x1FAF0,0x1FAF1,0x1FAF2,0x1FAF3,0x1FAF4,0x1FAF5,0x1FAF6,0x1FAF7,0x1FAF8,0x1FAF9,0x1FAFA,0x1FAFB,0x1FAFC,0x1FAFD,0x1FAFE,0x1FAFF,0x1FB01,0x1FB02,0x1FB03,0x1FB04,0x1FB05,0x1FB06,0x1FB07,0x1FB08,0x1FB09,0x1FB0A,0x1FB0B,0x1FB0C,0x1FB0D,0x1FB0E,0x1FB0F,0x1FB10,0x1FB11,0x1FB12,0x1FB13,0x1FB14,0x1FB15,0x1FB16,0x1FB17,0x1FB18,0x1FB19,0x1FB1A,0x1FB1B,0x1FB1C,0x1FB1D,0x1FB1E,0x1FB1F,0x1FB20,0x1FB21,0x1FB22,0x1FB23,0x1FB24,0x1FB25,0x1FB26,0x1FB27,0x1FB28,0x1FB29,0x1FB2A,0x1FB2B,0x1FB2C,0x1FB2D,0x1FB2E,0x1FB2F,0x1FB30,0x1FB31,0x1FB32,0x1FB33,0x1FB34,0x1FB35,0x1FB36,0x1FB37,0x1FB38,0x1FB39,0x1FB3A,0x1FB3B,0x1FB3C,0x1FB3D,0x1FB3E,0x1FB3F,0x1FB40,0x1FB41,0x1FB42,0x1FB43,0x1FB44,0x1FB45,0x1FB46,0x1FB47,0x1FB48,0x1FB49,0x1FB4A,0x1FB4B,0x1FB4C,0x1FB4D,0x1FB4E,0x1FB4F,0x1FB50,0x1FB51,0x1FB52,0x1FB53,0x1FB54,0x1FB55,0x1FB56,0x1FB57,0x1FB58,0x1FB59,0x1FB5A,0x1FB5B,0x1FB5C,0x1FB5D,0x1FB5E,0x1FB5F,0x1FB60,0x1FB61,0x1FB62,0x1FB63,0x1FB64,0x1FB65,0x1FB66,0x1FB67,0x1FB68,0x1FB69,0x1FB6A,0x1FB6B,0x1FB6C,0x1FB6D,0x1FB6E,0x1FB6F,0x1FB70,0x1FB71,0x1FB72,0x1FB73,0x1FB74,0x1FB75,0x1FB76,0x1FB77,0x1FB78,0x1FB79,0x1FB7A,0x1FB7B,0x1FB7C,0x1FB7D,0x1FB7E,0x1FB7F,0x1FB80,0x1FB81,0x1FB82,0x1FB83,0x1FB84,0x1FB85,0x1FB86,0x1FB87,0x1FB88,0x1FB89,0x1FB8A,0x1FB8B,0x1FB8C,0x1FB8D,0x1FB8E,0x1FB8F,0x1FB90,0x1FB91,0x1FB92,0x1FB93,0x1FB94,0x1FB95,0x1FB96,0x1FB97,0x1FB98,0x1FB99,0x1FB9A,0x1FB9B,0x1FB9C,0x1FB9D,0x1FB9E,0x1FB9F,0x1FBA0,0x1FBA1,0x1FBA2,0x1FBA3,0x1FBA4,0x1FBA5,0x1FBA6,0x1FBA7,0x1FBA8,0x1FBA9,0x1FBAA,0x1FBAB,0x1FBAC,0x1FBAD,0x1FBAE,0x1FBAF,0x1FBB0,0x1FBB1,0x1FBB2,0x1FBB3,0x1FBB4,0x1FBB5,0x1FBB6,0x1FBB7,0x1FBB8,0x1FBB9,0x1FBBA,0x1FBBB,0x1FBBC,0x1FBBD,0x1FBBE,0x1FBBF,0x1FBC0,0x1FBC1,0x1FBC2,0x1FBC3,0x1FBC4,0x1FBC5,0x1FBC6,0x1FBC7,0x1FBC8,0x1FBC9,0x1FBCA,0x1FBCB,0x1FBCC,0x1FBCD,0x1FBCE,0x1FBCF,0x1FBD0,0x1FBD1,0x1FBD2,0x1FBD3,0x1FBD4,0x1FBD5,0x1FBD6,0x1FBD7,0x1FBD8,0x1FBD9,0x1FBDA,0x1FBDB,0x1FBDC,0x1FBDD,0x1FBDE,0x1FBDF,0x1FBE0,0x1FBE2,0x1FBE3,0x1FBE4,0x1FBE5,0x1FBE6,0x1FBE7,0x1FBE8,0x1FBE9,0x1FBEA,0x1FBEB,0x1FBEC,0x1FBED,0x1FBEE,0x1FBEF,0x1FBF0,0x1FBF1,0x1FBF2,0x1FBF3,0x1FBF4,0x1FBF5,0x1FBF6,0x1FBF7,0x1FBF8,0x1FBF9,0x1FBFA,0x1FBFB,0x1FBFC,0x1FBFD,0x1FBFE,0x1FBFF,0x1FC00,0x1FC01,0x1FC02,0x1FC03,0x1FC04,0x1FC05,0x1FC06,0x1FC07,0x1FC08,0x1FC09,0x1FC0A,0x1FC0B,0x1FC0C,0x1FC0D,0x1FC0E,0x1FC0F,0x1FC10,0x1FC11,0x1FC12,0x1FC13,0x1FC14,0x1FC15,0x1FC16,0x1FC17,0x1FC18,0x1FC19,0x1FC1A,0x1FC1B,0x1FC1C,0x1FC1D,0x1FC1E,0x1FC1F,0x1FC20,0x1FC21,0x1FC22,0x1FC23,0x1FC24,0x1FC25,0x1FC26,0x1FC27,0x1FC28,0x1FC29,0x1FC2A,0x1FC2B,0x1FC2C,0x1FC2D,0x1FC2E,0x1FC2F,0x1FC30,0x1FC31,0x1FC32,0x1FC33,0x1FC34,0x1FC35,0x1FC36,0x1FC37,0x1FC38,0x1FC39,0x1FC3A,0x1FC3B,0x1FC3C,0x1FC3D,0x1FC3E,0x1FC3F,0x1FC40,0x1FC41,0x1FC42,0x1FC43,0x1FC44,0x1FC45,0x1FC46,0x1FC47,0x1FC48,0x1FC49,0x1FC4A,0x1FC4B,0x1FC4C,0x1FC4D,0x1FC4E,0x1FC4F,0x1FC50,0x1FC51,0x1FC52,0x1FC53,0x1FC54,0x1FC55,0x1FC56,0x1FC57,0x1FC58,0x1FC59,0x1FC5A,0x1FC5B,0x1FC5C,0x1FC5D,0x1FC5E,0x1FC5F,0x1FC60,0x1FC61,0x1FC63,0x1FC64,0x1FC65,0x1FC66,0x1FC67,0x1FC68,0x1FC69,0x1FC6A,0x1FC6B,0x1FC6C,0x1FC6D,0x1FC6E,0x1FC6F,0x1FC70,0x1FC71,0x1FC72,0x1FC73,0x1FC74,0x1FC75,0x1FC76,0x1FC77,0x1FC78,0x1FC79,0x1FC7A,0x1FC7B,0x1FC7C,0x1FC7E,0x1FC7F,0x1FC80,0x1FC81,0x1FC82,0x1FC83,0x1FC84,0x1FC85,0x1FC86,0x1FC87,0x1FC88,0x1FC89,0x1FC8A,0x1FC8B,0x1FC8C,0x1FC8D,0x1FC8E,0x1FC8F,0x1FC90,0x1FC91,0x1FC92,0x1FC93,0x1FC94,0x1FC95,0x1FC96,0x1FC97,0x1FC98,0x1FC99,0x1FC9A,0x1FC9B,0x1FC9C,0x1FC9D,0x1FC9E,0x1FC9F,0x1FCA0,0x1FCA1,0x1FCA2,0x1FCA3,0x1FCA4,0x1FCA5,0x1FCA6,0x1FCA7,0x1FCA8,0x1FCA9,0x1FCAA,0x1FCAB,0x1FCAC,0x1FCAD,0x1FCAE,0x1FCAF,0x1FCB0,0x1FCB1,0x1FCB2,0x1FCB3,0x1FCB4,0x1FCB5,0x1FCB6,0x1FCB7,0x1FCB8,0x1FCB9,0x1FCBA,0x1FCBB,0x1FCBC,0x1FCBD,0x1FCBE,0x1FCBF,0x1FCC0,0x1FCC1,0x1FCC2,0x1FCC3,0x1FCC4,0x1FCC5,0x1FCC6,0x1FCC7,0x1FCC8,0x1FCC9,0x1FCCA,0x1FCCB,0x1FCCC,0x1FCCD,0x1FCCE,0x1FCCF,0x1FCD0,0x1FCD1,0x1FCD2,0x1FCD3,0x1FCD4,0x1FCD5,0x1FCD6,0x1FCD7,0x1FCD8,0x1FCD9,0x1FCDA,0x1FCDB,0x1FCDC,0x1FCDD,0x1FCDE,0x1FCDF,0x1FCE0,0x1FCE1,0x1FCE2,0x1FCE4,0x1FCE5,0x1FCE6,0x1FCE7,0x1FCE8,0x1FCE9,0x1FCEA,0x1FCEB,0x1FCEC,0x1FCED,0x1FCEE,0x1FCEF,0x1FCF0,0x1FCF1,0x1FCF2,0x1FCF3,0x1FCF4,0x1FCF5,0x1FCF6,0x1FCF7,0x1FCF8,0x1FCF9,0x1FCFA,0x1FCFB,0x1FCFC,0x1FCFD,0x1FCFE,0x1FCFF,0x1FD00,0x1FD01,0x1FD02,0x1FD03,0x1FD04,0x1FD05,0x1FD06,0x1FD07,0x1FD08,0x1FD09,0x1FD0A,0x1FD0B,0x1FD0C,0x1FD0D,0x1FD0E,0x1FD0F,0x1FD10,0x1FD11,0x1FD12,0x1FD13,0x1FD14,0x1FD15,0x1FD16,0x1FD17,0x1FD18,0x1FD19,0x1FD1A,0x1FD1B,0x1FD1C,0x1FD1D,0x1FD1E,0x1FD1F,0x1FD20,0x1FD21,0x1FD22,0x1FD23,0x1FD24,0x1FD25,0x1FD26,0x1FD27,0x1FD28,0x1FD29,0x1FD2A,0x1FD2B,0x1FD2C,0x1FD2D,0x1FD2E,0x1FD2F,0x1FD30,0x1FD31,0x1FD32,0x1FD33,0x1FD34,0x1FD35,0x1FD36,0x1FD37,0x1FD38,0x1FD39,0x1FD3A,0x1FD3B,0x1FD3C,0x1FD3E,0x1FD3F,0x1FD41,0x1FD42,0x1FD44,0x1FD45,0x1FD47,0x1FD48,0x1FD49,0x1FD4A,0x1FD4B,0x1FD4C,0x1FD4D,0x1FD4E,0x1FD4F,0x1FD50,0x1FD51,0x1FD52,0x1FD53,0x1FD54,0x1FD55,0x1FD56,0x1FD57,0x1FD59,0x1FD5A,0x1FD5C,0x1FD5D,0x1FD5F,0x1FD60,0x1FD62,0x1FD63,0x1FD65,0x1FD66,0x1FD68,0x1FD69,0x1FD6A,0x1FD6B,0x1FD6C,0x1FD6D,0x1FD6E,0x1FD6F,0x1FD70,0x1FD71,0x1FD72,0x1FD73,0x1FD74,0x1FD75,0x1FD77,0x1FD78,0x1FD7A,0x1FD7B,0x1FD7D,0x1FD7E,0x1FD80,0x1FD81,0x1FD83,0x1FD84,0x1FD86,0x1FD87,0x1FD89,0x1FD8A,0x1FD8B,0x1FD8C,0x1FD8D,0x1FD8E,0x1FD8F,0x1FD90,0x1FD91,0x1FD92,0x1FD93,0x1FD94,0x1FD95,0x1FD96,0x1FD97,0x1FD98,0x1FD99,0x1FD9B,0x1FD9C,0x1FD9E,0x1FD9F,0x1FDA1,0x1FDA2,0x1FDA4,0x1FDA5,0x1FDA7,0x1FDA8,0x1FDAA,0x1FDAB,0x1FDAC,0x1FDAD,0x1FDAE,0x1FDAF,0x1FDB0,0x1FDB1,0x1FDB2,0x1FDB3,0x1FDB4,0x1FDB5,0x1FDB6,0x1FDB7,0x1FDB9,0x1FDBA,0x1FDBC,0x1FDBD,0x1FDBF,0x1FDC0,0x1FDC2,0x1FDC3,0x1FDC5,0x1FDC6,0x1FDC8,0x1FDC9,0x1FDCB,0x1FDCC,0x1FDCD,0x1FDCE,0x1FDCF,0x1FDD0,0x1FDD1,0x1FDD2,0x1FDD3,0x1FDD4,0x1FDD5,0x1FDD7,0x1FDD8,0x1FDDA,0x1FDDB,0x1FDDD,0x1FDDE,0x1FDE0,0x1FDE1,0x1FDE3,0x1FDE4,0x1FDE6,0x1FDE7,0x1FDE9,0x1FDEA,0x1FDEB,0x1FDEC,0x1FDED,0x1FDEE,0x1FDEF,0x1FDF0,0x1FDF1,0x1FDF2,0x1FDF3,0x1FDF4,0x1FDF5,0x1FDF6,0x1FDF7,0x1FDF8,0x1FDF9,0x1FDFB,0x1FDFC,0x1FDFE,0x1FDFF,0x1FE01,0x1FE02,0x1FE04,0x1FE05,0x1FE07,0x1FE08,0x1FE0A,0x1FE0B,0x1FE0C,0x1FE0D,0x1FE0E,0x1FE0F,0x1FE10,0x1FE11,0x1FE12,0x1FE13,0x1FE14,0x1FE15,0x1FE16,0x1FE17,0x1FE19,0x1FE1A,0x1FE1C,0x1FE1D,0x1FE1F,0x1FE20,0x1FE22,0x1FE23,0x1FE25,0x1FE26,0x1FE28,0x1FE29,0x1FE2B,0x1FE2C,0x1FE2D,0x1FE2E,0x1FE2F,0x1FE30,0x1FE31,0x1FE32,0x1FE33,0x1FE34,0x1FE35,0x1FE37,0x1FE38,0x1FE3A,0x1FE3B,0x1FE3D,0x1FE3E,0x1FE40,0x1FE41,0x1FE43,0x1FE44,0x1FE46,0x1FE47,0x1FE49,0x1FE4A,0x1FE4B,0x1FE4C,0x1FE4D,0x1FE4E,0x1FE4F,0x1FE50,0x1FE51,0x1FE52,0x1FE53,0x1FE54,0x1FE55,0x1FE56,0x1FE57,0x1FE58,0x1FE59,0x1FE5B,0x1FE5C,0x1FE5E,0x1FE5F,0x1FE61,0x1FE62,0x1FE64,0x1FE65,0x1FE67,0x1FE68,0x1FE6A,0x1FE6B,0x1FE6C,0x1FE6D,0x1FE6E,0x1FE6F,0x1FE70,0x1FE71,0x1FE72,0x1FE73,0x1FE74,0x1FE75,0x1FE76,0x1FE77,0x1FE79,0x1FE7A,0x1FE7C,0x1FE7D,0x1FE7F,0x1FE80,0x1FE82,0x1FE83,0x1FE85,0x1FE86,0x1FE88,0x1FE89,0x1FE8B,0x1FE8C,0x1FE8D,0x1FE8E,0x1FE8F,0x1FE90,0x1FE91,0x1FE92,0x1FE93,0x1FE94,0x1FE95,0x1FE97,0x1FE98,0x1FE9A,0x1FE9B,0x1FE9D,0x1FE9E,0x1FEA0,0x1FEA1,0x1FEA3,0x1FEA4,0x1FEA6,0x1FEA7,0x1FEA9,0x1FEAA,0x1FEAB,0x1FEAC,0x1FEAD,0x1FEAE,0x1FEAF,0x1FEB0,0x1FEB1,0x1FEB2,0x1FEB3,0x1FEB4,0x1FEB5,0x1FEB6,0x1FEB7,0x1FEB8,0x1FEB9,0x1FEBB,0x1FEBC,0x1FEBE,0x1FEBF,0x1FEC1,0x1FEC2,0x1FEC4,0x1FEC5,0x1FEC7,0x1FEC8,0x1FECA,0x1FECB,0x1FECC,0x1FECD,0x1FECE,0x1FECF,0x1FED0,0x1FED1,0x1FED2,0x1FED3,0x1FED4,0x1FED5,0x1FED6,0x1FED7,0x1FED9,0x1FEDA,0x1FEDC,0x1FEDD,0x1FEDF,0x1FEE0,0x1FEE2,0x1FEE3,0x1FEE5,0x1FEE6,0x1FEE8,0x1FEE9,0x1FEEB,0x1FEEC,0x1FEED,0x1FEEE,0x1FEEF,0x1FEF0,0x1FEF1,0x1FEF2,0x1FEF3,0x1FEF4,0x1FEF5,0x1FEF7,0x1FEF8,0x1FEFA,0x1FEFB,0x1FEFD,0x1FEFE,0x1FF00,0x1FF01,0x1FF03,0x1FF04,0x1FF06,0x1FF07,0x1FF09,0x1FF0A,0x1FF0B,0x1FF0C,0x1FF0D,0x1FF0E,0x1FF0F,0x1FF10,0x1FF11,0x1FF12,0x1FF13,0x1FF14,0x1FF15,0x1FF16,0x1FF17,0x1FF18,0x1FF19,0x1FF1B,0x1FF1C,0x1FF1E,0x1FF1F,0x1FF21,0x1FF22,0x1FF24,0x1FF25,0x1FF27,0x1FF28,0x1FF2A,0x1FF2B,0x1FF2C,0x1FF2D,0x1FF2E,0x1FF2F,0x1FF30,0x1FF31,0x1FF32,0x1FF33,0x1FF34,0x1FF35,0x1FF36,0x1FF37,0x1FF39,0x1FF3A,0x1FF3C,0x1FF3D,0x1FF3F,0x1FF40,0x1FF42,0x1FF43,0x1FF45,0x1FF46,0x1FF48,0x1FF49,0x1FF4B,0x1FF4C,0x1FF4E,0x1FF4F,0x1FF51,0x1FF52,0x1FF54,0x1FF55,0x1FF57,0x1FF58,0x1FF5A,0x1FF5B,0x1FF5D,0x1FF5E,0x1FF60,0x1FF61,0x1FF63,0x1FF64,0x1FF66,0x1FF67,0x1FF69,0x1FF6A,0x1FF6B,0x1FF6C,0x1FF6D,0x1FF6F,0x1FF70,0x1FF71,0x1FF72,0x1FF73,0x1FF75,0x1FF76,0x1FF77,0x1FF78,0x1FF79,0x1FF7B,0x1FF7C,0x1FF81,0x1FF82,0x1FF84,0x1FF85,0x1FF87,0x1FF88,0x1FF89,0x1FF8A,0x1FF8B,0x1FF8D,0x1FF8E,0x1FF8F,0x1FF90,0x1FF91,0x1FF93,0x1FF94,0x1FF96,0x1FF97,0x1FF99,0x1FF9A,0x1FF9C,0x1FF9D,0x1FF9F,0x1FFA0,0x1FFA2,0x1FFA3,0x1FFA5,0x1FFA6,0x1FFA8,0x1FFA9,0x1FFAB,0x1FFAC,0x1FFAD,0x1FFAE,0x1FFAF,0x1FFB1,0x1FFB2,0x1FFB3,0x1FFB4,0x1FFB5,0x1FFB7,0x1FFB8,0x1FFBA,0x1FFBB,0x1FFBD,0x1FFBE,0x1FFC0,0x1FFC1,0x1FFC3,0x1FFC4,0x1FFC6,0x1FFC7,0x1FFC9,0x1FFCA,0x1FFCB,0x1FFCC,0x1FFCD,0x1FFCF,0x1FFD0,0x1FFD1,0x1FFD2,0x1FFD3,0x1FFD5,0x1FFD6,0x1FFD7,0x1FFD8,0x1FFD9,0x1FFDB,0x1FFDC,0x1FFDE,0x1FFDF,0x1FFE1,0x1FFE2,0x1FFE4,0x1FFE5,0x1FFE7,0x1FFE8,0x39C205,0x39C206
        };
        public static byte[] copyrightValues = new byte[]
        {
            0xEA,0xEA,0xEA,0xEA,0xC1,0xE8,0xF3, 0x44,0x8D,0xBB,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0x18,0x24,0x18,0x24,0x18,0x24,0x0,0x18,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24,0x24,0x5A,0x24,0x5A,0x24,0x5A,0x0,0x24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x44,0x44,0xBA,0xBA,0x45,0xA2,0x5D,0xBA,0x45,0x44,0xBA,0x38,0x44,0x0,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x24,0x3E,0x41,0x40,0xBE,0x3C,0x42,0x2,0x7D,0x7C,0x82,0x18,0x64,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x62,0x95,0x66,0x99,0xC,0x72,0x18,0x24,0x30,0x4E,0x66,0x99,0xC6,0x29,0x0,0xC6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x38,0x44,0x6C,0x93,0x3B,0x44,0x6E,0x91,0xC6,0x39,0x7B,0x84,0x0,0x7F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x12,0xC,0x12,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x12,0x18,0x24,0x18,0x24,0x18,0x24,0x18,0x24,0xC,0x12,0x0,0xC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0xC,0x12,0xC,0x12,0xC,0x12,0xC,0x12,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6C,0x6C,0x92,0x7C,0x82,0x38,0x44,0x7C,0x82,0x6C,0x92,0x0,0x6C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0x18,0x66,0x7E,0x81,0x18,0x66,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x12,0xC,0x12,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0x0,0x7E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x12,0x18,0x24,0x30,0x48,0x60,0x90,0x40,0xA0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x6E,0x91,0x76,0x89,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0x38,0x44,0x18,0x24,0x18,0x24,0x18,0x24,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x6,0x79,0x3C,0x42,0x60,0x9E,0x7E,0x81,0x0,0x7E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0xC,0x72,0x6,0x79,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x60,0x9C,0x6C,0x92,0x6C,0x92,0x7E,0x81,0xC,0x72,0xC,0x12,0x0,0xC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0x40,0xBE,0x7C,0x82,0x6,0x79,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x60,0x9C,0x7C,0x82,0x66,0x99,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0xC,0x72,0xC,0x12,0x18,0x24,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x3C,0x42,0x66,0x99,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x66,0x99,0x3E,0x41,0x6,0x39,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0x18,0x24,0x0,0x18,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x24,0x18,0x24,0x0,0x18,0x18,0x24,0x18,0x24,0x10,0x28,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x12,0x18,0x24,0x30,0x48,0x18,0x24,0xC,0x12,0x0,0xC,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x3E,0x41,0x3E,0x41,0x0,0x3E,0x3E,0x41,0x3E,0x41,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0x48,0x18,0x24,0xC,0x12,0x18,0x24,0x30,0x48,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x6,0x79,0x1C,0x22,0x0,0x1C,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x6E,0x91,0x6C,0x92,0x60,0x9E,0x3E,0x41,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x66,0x99,0x7E,0x81,0x66,0x99,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7C,0x7C,0x82,0x66,0x99,0x7C,0x82,0x66,0x99,0x66,0x99,0x7C,0x82,0x0,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x60,0x96,0x60,0x96,0x66,0x99,0x3C,0xC2,0x0,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7C,0x7C,0x82,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x7C,0x82,0x0,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0x60,0x9E,0x78,0x84,0x60,0x98,0x60,0x9E,0x7E,0x81,0x0,0x7F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0x60,0x9E,0x78,0x84,0x60,0x98,0x60,0x90,0x60,0x90,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x60,0x9E,0x6E,0x91,0x66,0x99,0x3C,0x43,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x76,0x66,0x99,0x66,0x99,0x7E,0x81,0x66,0x99,0x66,0x99,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x18,0x24,0x18,0x24,0x18,0x24,0x18,0x24,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x3E,0x41,0xC,0x32,0xC,0x12,0xC,0x72,0x6C,0x92,0x38,0x44,0x0,0x38,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x6C,0x92,0x78,0x84,0x78,0x84,0x6C,0x92,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x60,0x90,0x60,0x90,0x60,0x90,0x60,0x90,0x60,0x9C,0x7C,0x82,0x0,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0x63,0x94,0x77,0x88,0x7F,0x80,0x6B,0x94,0x63,0x9C,0x63,0x94,0x0,0x63,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x76,0x89,0x7E,0x81,0x7E,0x81,0x6E,0x91,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7C,0x7C,0x82,0x66,0x99,0x66,0x99,0x7C,0x82,0x60,0x9C,0x60,0x90,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x66,0x99,0x66,0x99,0x6C,0x92,0x3A,0x45,0x0,0x3A,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7C,0x7C,0x82,0x66,0x99,0x66,0x99,0x7C,0x82,0x66,0x99,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x62,0x9D,0x3C,0x42,0x6,0x79,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0x18,0x66,0x18,0x24,0x18,0x24,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x3C,0x42,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0x63,0x94,0x63,0x9C,0x6B,0x94,0x7F,0x80,0x77,0x88,0x63,0x94,0x0,0x63,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x3C,0x42,0x18,0x24,0x3C,0x42,0x66,0x99,0x42,0xA5,0x0,0x42,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x66,0x99,0x3C,0x42,0x18,0x24,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0xC,0xF2,0x18,0x24,0x30,0x48,0x60,0x9E,0x7E,0x81,0x0,0x7E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xE0,0x10,0x40,0xBF,0x5F,0xA0,0x15,0x6A,0x11,0x2E,0x0,0x39,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x2A,0x0,0x3E,0x3E,0x41,0x66,0x99,0x66,0x99,0x66,0x99,0x3B,0x44,0x0,0x3F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24,0x5A,0x0,0x3C,0x3C,0x42,0x66,0x99,0x66,0x99,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24,0x58,0x0,0x6E,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x3E,0x41,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38,0x38,0x44,0x64,0x9A,0x6C,0x92,0x66,0x99,0x66,0x99,0x6C,0x92,0x60,0x9C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x60,0x9C,0x60,0x9E,0x3C,0x42,0x8,0x34,0x18,0x24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x3E,0x41,0x66,0x99,0x66,0x99,0x66,0x99,0x3B,0x44,0x0,0x3B,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x90,0x60,0x9C,0x7C,0x82,0x66,0x99,0x66,0x99,0x66,0x99,0x7C,0x82,0x0,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x60,0x9E,0x66,0x99,0x3C,0x42,0x0,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x9,0x6,0x39,0x3E,0x41,0x66,0x99,0x66,0x99,0x66,0x99,0x3E,0x41,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x7C,0x82,0x60,0x9E,0x3E,0x41,0x0,0x3E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xE,0xE,0x11,0x18,0x26,0x3C,0x42,0x18,0x24,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x3E,0x41,0x66,0x99,0x66,0x19,0x3E,0x41,0x6,0x39,0x3C,0x42,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x90,0x60,0x9C,0x7C,0x82,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x24,0x0,0x18,0x18,0x24,0x18,0x24,0x18,0x24,0x18,0x24,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0x12,0x0,0xC,0xC,0x12,0xC,0x12,0xC,0x12,0xC,0x72,0x6C,0x92,0x38,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x90,0x60,0x96,0x66,0x99,0x7C,0x82,0x78,0x84,0x6C,0x92,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x48,0x30,0x48,0x30,0x48,0x30,0x48,0x30,0x48,0x30,0x4C,0x1C,0x22,0x1C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xEC,0xEC,0x12,0xD6,0x29,0xD6,0x29,0xD6,0x29,0xD6,0x29,0x0,0xD6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7C,0x7C,0x82,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x0,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x66,0x99,0x66,0x99,0x66,0x99,0x3C,0x42,0x3C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7C,0x7C,0x82,0x66,0x99,0x66,0x99,0x7C,0x83,0x60,0x9C,0x60,0x90,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x3E,0x41,0x66,0x99,0x66,0x99,0x3E,0xC1,0x7,0x38,0x6,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6C,0x6C,0x92,0x76,0x89,0x60,0x96,0x60,0x90,0x60,0x90,0x60,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3C,0x3C,0x42,0x60,0x9C,0x3C,0x42,0x6,0x79,0x7C,0x82,0x0,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x4C,0x7C,0x82,0x30,0x4C,0x30,0x4E,0x36,0x49,0x1C,0x22,0x0,0x1C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x66,0x99,0x66,0x99,0x66,0x99,0x3B,0x44,0x3F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x66,0x99,0x66,0x99,0x3C,0x42,0x18,0x24,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0x6B,0x94,0x6B,0x94,0x6B,0x94,0x6B,0x94,0x37,0x48,0x0,0x37,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x7E,0x81,0x3C,0x42,0x7E,0x81,0x66,0x99,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x66,0x99,0x66,0x99,0x66,0x99,0x3E,0x41,0x6,0x39,0x3C,0x42,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7E,0x7E,0x81,0xC,0x72,0x18,0x24,0x30,0x4E,0x7E,0x81,0x0,0x7E,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0x0,0x1C,0x0,0x1C,0x1C,0x0,0x18,0x0,0xC,0x1C,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x66,0x0,0xEE,0xEE,0x0,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3E,0x7F,0x0,0xFF,0x0,0xFF,0xFF,0x0,0xFF,0x0,0xFE,0x7C,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x1E,0x0,0x3C,0x7C,0x0,0x3E,0x0,0x3C,0x78,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63,0xF
        };
        public static void WriteToArr (ROM rom)
        {
            for (int i = 0; i < copyrightAddresses.Length; i++)
            {
                var addr = copyrightAddresses[i];
                rom.rom[addr] = copyrightValues[i];
            }
        }
        public static bool IntSequenceEqualsSNES(int[] intArr, byte[] byteArr)
        {
            for (int i = 0; i < intArr.Length && i * 2 < byteArr.Length; i++)
            {
                int num = (byteArr[i * 2] << 0) | (byteArr[i * 2 + 1] << 8);
                if (num != intArr[i])
                {
                    return false;
                }
            }
            return true;
        }
        public static SaveFileDialog SaveFile (string title, string filter)
        {
            SaveFileDialog @return = new SaveFileDialog();
            @return.Title = title;
            @return.Filter = filter;
            if (@return.ShowDialog() == DialogResult.OK)
            {
                return @return;
            }
            else
            {
                return null;
            }
        }
        public static OpenFileDialog OpenFile (string title, string filter)
        {
            OpenFileDialog @return = new OpenFileDialog();
            @return.Title = title;
            @return.Filter = filter;
            if (@return.ShowDialog() == DialogResult.OK)
            {
                return @return;
            }
            else
            {
                return null;
            }
        }
        public static bool EqualImage(Bitmap imgA, Bitmap imgB)
        {
            if (imgA.Width != imgB.Width || imgA.Height != imgB.Height)
            {
                return false;
            }
            for (int y = 0; y < imgA.Height; y++)
            {
                for (int x = 0; x < imgA.Width; x++)
                {
                    Color clrA = imgA.GetPixel(x, y);
                    Color clrB = imgB.GetPixel(x, y);
                    if (clrA != clrB)
                    {
                        return false;
                    }
                }
            }
            return true;
        }
        public static List<byte[]> SplitArray(byte[] arr, string str)
        {
            List<byte[]> @return = new List<byte[]>();
            List<byte> full = new List<byte>(arr);
            byte[] strArr = Encoding.ASCII.GetBytes(str);
            int index = FindSequence(arr, strArr);
            int startIndex = 0;
            while (index != -1)
            {
                var a = full.Take(index).ToArray();
                @return.Add(a);
                full = full.Skip(index + str.Length).ToList();

                index = FindSequence(full.ToArray(), strArr);
            }


            return @return;
        }

        public static int FindPatternInArray(byte[] array, byte[] pattern)
        {
            int[] LUT = CreateBadMatchLUT(pattern);

            for (int i = 0; i < array.Length - pattern.Length;)
            {
                for (int j = pattern.Length - 1; j + i >= i; j--)
                {
                    if (pattern[j] != array[j + i])
                    {
                        i += LUT[array[j]];

                        goto fail;
                    }

                }
                return i;
            fail:;

            }

            return -1;
        }
        private static int[] CreateBadMatchLUT(byte[] pattern)
        {
            int length = pattern.Length;
            int[] LUT = Enumerable.Repeat(length - 1, 0x100).ToArray();
            for (int i = 0; i < length; i++)
            {
                int val = length - i - 1;
                if (val < 1)
                {
                    val = 1;
                }
                LUT[pattern[i]] = val;
            }
            return LUT;
        }
        public static int FindSequence(this byte[] data, byte[] find)
        {
            int length = find.Length;
            // Populate increment table
            int[] incTable = new int[0x100];
            {
                // Default increment to the length of bytes to find
                for (int i = 0; i < incTable.Length; i++)
                    incTable[i] = length;
                // Mark bytes that we care about
                for (int i = 0; i < length; i++)
                    incTable[find[i]] = length - i - 1;
            }

            // Start searching data
            int inc = 1;
            for (int i = length - 1; i < data.Length; i += inc)
            {
                // Read the increment value of our current byte
                inc = incTable[data[i]];

                // Have we found the correct ending character?
                if (inc == 0)
                {
                    {
                        // Compare whole find buffer
                        for (int u = 0; u < length; u++)
                        {
                            if (data[u + i - length + 1] != find[u])
                                goto next;
                        }
                        // Match found, return its index
                        return i - length + 1;
                    }
                next:
                    inc = 1;
                }
            }

            return -1;
        }
        public static Bitmap BytesToBitmap(byte[] byteArray)
        {
            using (MemoryStream ms = new MemoryStream(byteArray))
            {
                ms.Position = 0;
                Bitmap img = (Bitmap)Image.FromStream(ms);
                return img;
            }
        }
        public static void SaveArray(byte[] arr, string str)
        {
            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "BIN (*.bin)|*.bin";
            dialog.Title = str;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                File.WriteAllBytes(dialog.FileName, arr);
                MessageBox.Show("Exported");
            }
        }
        public static byte[] LoadArray(string str)
        {
            byte[] data = null;

            OpenFileDialog d = new OpenFileDialog();
            d.Filter = "BIN (*.bin)|*.bin";
            d.Title = str;
            if (d.ShowDialog() == DialogResult.OK)
            {
                data = File.ReadAllBytes(d.FileName);
            }
            return data;
        }
        public static bool SequenceEqual(byte[] a, byte[] b)
        {
            int aL = a.Length;
            int bL = b.Length;
            if (aL != bL)
                return false;
            for (int i = 0; i < aL && i < bL; i++)
            {
                if (a[i] != b[i])
                {
                    return false;
                }
            }
            return true;
        }
        public static byte[] ToArray(List<byte> arr)
        {
            int arrL = arr.Count;
            byte[] @return = new byte[arr.Count];
            return @return;
        }
        public static void GetBananaGraphic()
        {
            List<Bitmap> bitmaps = new List<Bitmap>();

            var folder = "banana_files";
            DirectoryInfo di = new DirectoryInfo(folder);

            FileInfo[] files = di.GetFiles("*.gif");

            foreach (var file in files)
            {
                bitmaps.Add(new Bitmap(file.FullName));
            }

            bananaImg = bitmaps;

        }
        public static void ImportCredits (ROM rom, byte[] arr)
        {
            int creditsSize = rom.CREDITSSIZELIMIT[0];
            int fakeSize = rom.CREDITSSIZELIMIT[1];
            int creditsStart = rom.Read16LDA(rom.CREDITSSTARTLDA[0]) | 0x810000;
            int fakeStart = rom.Read16LDA(rom.CREDITSSTARTLDA[1]) | 0x810000;
            int addressOg = (arr[0] << 16) | (arr[1] << 8) | (arr[2] << 0);
            int addressFake = (arr[5] << 16) | (arr[6] << 8) | (arr[7] << 0);
            int valueCreditsEnd = (arr[3] << 8) | (arr[4] << 0);
            int valueFakeCreditsEnd = (arr[8] << 8) | (arr[9] << 0);
            arr = arr.Skip(10).ToArray();
            var creditsArr = arr.Take(creditsSize).ToArray();
            var fakeArr = arr.Skip(creditsSize).ToArray();

            rom.Write16(addressOg, valueCreditsEnd);
            rom.Write16(addressFake, valueFakeCreditsEnd);
            rom.WriteArrToROM(creditsArr, creditsStart);
            rom.WriteArrToROM(fakeArr, fakeStart);
        }
        public static byte[] ExportCredits (ROM rom)
        {
            int creditsStart = rom.Read16LDA(rom.CREDITSSTARTLDA[0]) | 0x810000;
            int fakeStart = rom.Read16LDA(rom.CREDITSSTARTLDA[1]) | 0x810000;
            int creditsSize = rom.CREDITSSIZELIMIT[0];
            int fakeSize = rom.CREDITSSIZELIMIT[1];
            byte[] creditArr = rom.ReadSubArray(creditsStart, creditsSize, rom.rom.ToArray());
            byte[] fakeArr = rom.ReadSubArray(fakeStart, fakeSize, rom.rom.ToArray());
            byte[] exportCred = rom.Read16LDAForExport(rom.CREDITSENDLDA[0]);
            byte[] exportFake = rom.Read16LDAForExport(rom.CREDITSENDLDA[1]);
            List<byte> arr = new List<byte>();
            arr.AddRange(exportCred);
            arr.AddRange(exportFake);
            arr.AddRange(creditArr);
            arr.AddRange(fakeArr);

            return arr.ToArray();
        }
        public static int GetIndexOfCode (List<LevelAndCode> list, int lvlCode)
        {
            int index = -1;
            for (int i = 0; i < list.Count; i++)
            {
                if (list[i].code == lvlCode)
                {
                    return i;
                }
            }
            return index;
        }
        public static string[] GetCustomEndings(int num, ROM rom)
        {
            int og = num;
            List<string> pointers = new List<string>();
            List<string> scripts = new List<string>();
            string str1 = "// ";
            string str2 = "\t.data32\t\t=ScriptWarp_";
            string str3 = "ScriptWarp_";

            for (int i = 0; i < 0xe6; i++)
            {
                string stage = rom.levelNameByCode[i];
                stage = stage.Replace(' ', '_').Replace('-', '_').Replace('+', '_').Replace('(', '_').Replace(')', '_').Replace('?', '_').Replace('&', '_').Replace('\'', '_').Replace('/', '_');
                string numAsStr = (num++).ToString("X4");
                string iString = i.ToString("X4");
                string t1 = str1 + numAsStr;
                string t2 = str2 + iString + stage;
                pointers.Add(t1);
                pointers.Add(t2);
                scripts.Add(t1);
                scripts.Add(str3 + iString + stage + ":");
                scripts.Add("\t.data16\t0x8200, 0xE8C7");
                scripts.Add("\t.data16\t0x1375, 0x" + i.ToString("X4"));
                scripts.Add("\t.data16\t0x8000");

            }
            pointers.AddRange(scripts);
            return pointers.ToArray();
        }



    }

    public static class Prompt
    {
        public static string ShowDialog(string text, string caption)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen
            };
            Label textLabel = new Label() { Left = 50, Top = 20, Width = 400, Text = text };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 400 };
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? textBox.Text : "";
        }
        // String input
        public static string ShowDialog(string text, string caption, string input)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen
            };
            Label textLabel = new Label() { Left = 50, Top = 20, Width = 400, Text = text };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 400, Text = input };
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? textBox.Text : "";
        }
        public static string ShowDialog(string text, string caption, int value)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen
            };
            Label textLabel = new Label() { Left = 50, Top = 20, Width = 400, Text = text };
            TextBox textBox = new TextBox() { Left = 50, Top = 50, Width = 400, Text = value.ToString("X4" )};
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            prompt.Controls.Add(textBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? textBox.Text : "";
        }
        public static int ShowRadioBox(string text, string caption, string optionA, string optionB, bool checkedA, bool checkedB)
        {
            Form prompt = new Form()
            {
                Width = 500,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedToolWindow,
                Text = caption,
                StartPosition = FormStartPosition.CenterScreen
            };
            GroupBox grpBox = new GroupBox() { Left = 20, Top = 40, Width = 300, Height = 60, Text = "" };
            Label textLabel = new Label() { Left = 50, Top = 20, Width = 400, Text = text };
            Button confirmation = new Button() { Text = "Ok", Left = 350, Width = 100, Top = 70, DialogResult = DialogResult.OK };
            RadioButton radioButtonA = new RadioButton() { Left = 40, Top = 10, Width = 75, Text = optionA, Checked = checkedA };
            RadioButton radioButtonB = new RadioButton() { Left = 200, Top = 10, Width = 75, Text = optionB, Checked = checkedB };
            confirmation.Click += (sender, e) => { prompt.Close(); };
            grpBox.Controls.Add(radioButtonA);
            grpBox.Controls.Add(radioButtonB);
            prompt.Controls.Add(grpBox);
            prompt.Controls.Add(confirmation);
            prompt.Controls.Add(textLabel);
            prompt.AcceptButton = confirmation;

            return prompt.ShowDialog() == DialogResult.OK ? (radioButtonA.Checked ? 0 : 1) : -1;
        }
        public static void ShowPictureBox(Bitmap bmp)
        {
            Form prompt = new Form()
            {
                Width = bmp.Width + 100,
                Height = bmp.Height + 100,
                FormBorderStyle = FormBorderStyle.FixedToolWindow,
                Text = "Image test",
                StartPosition = FormStartPosition.CenterScreen
            };
            PictureBox picBox = new PictureBox { Left = 20, Top = 20, Width = bmp.Width, Height = bmp.Height, Image = bmp };


            prompt.Controls.Add(picBox);

            prompt.ShowDialog();
        }
        public static void ShowColorInPictureBox(Color clr)
        {
            Bitmap bmp = new Bitmap(32, 32);
            using (Graphics g = Graphics.FromImage(bmp))
            {
                g.FillRectangle(new SolidBrush(clr), 0, 0, 32, 32);
            }
            ShowPictureBox(bmp);
        }
    }
}
